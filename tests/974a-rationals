-- The Stern-Brocot tree.
-- See: R. Hinze: "The Bird Tree", JFP 19(5) 2009.
-- Leans heavily on laziness.

data Rat = Rat Num Num
data Tree = Node Rat Tree Tree

append :: [Rat] -> [Rat] -> [Rat]
append xxs ys =
  match xxs with
      []   -> ys
    | x:xs -> x : (append xs ys)
  end
;

treeBFS :: Num -> Tree -> [Rat]
treeBFS n t =
  if n <= 0
    then []
    else match t with Node x l r ->
            append (treeBFS (n - 1) l) (x : treeBFS (n - 1) r)
         end
  end
;

-- Why use applicative functors? fmap is enough.
fapp :: (Rat -> Rat) -> Tree -> Tree
fapp f t =
  match t with Node x l r -> Node (f x) (fapp f l) (fapp f r) end
;

ratSucc :: Rat -> Rat
ratSucc r = match r with Rat n d -> Rat (n + d) d end
;
succ :: Tree -> Tree
succ = fapp ratSucc
;
ratInverse :: Rat -> Rat
ratInverse r = match r with Rat n d -> Rat d n end
;
inverse :: Tree -> Tree
inverse = fapp ratInverse
;

stern_brocot :: Tree
stern_brocot =
  Node (Rat 1 1)
       (inverse (succ (inverse stern_brocot)))
       (succ stern_brocot)
;

main = treeBFS 4 stern_brocot
