-- Mark Jones's "Composing Fractals", Journal of Functional
-- Programming, Vol 14 Num 6 2004.
-- Requires laziness as it uses infinite lists of approximations.

-- Standard list functions.
all :: ((Num, Num) -> Bool) -> [(Num, Num)] -> Bool
all p xxs = match xxs with [] -> True | x:xs -> p x && all p xs end
;
append :: [(Num, Num)] -> [(Num, Num)] -> [(Num, Num)]
append xxs ys =
  match xxs with
      []   -> ys
    | x:xs -> x : (append xs ys)
  end
;
concat :: [[(Num, Num)]] -> [(Num, Num)]
concat xxs =
  match xxs with
      []   -> []
    | x:xs -> append x (concat xs)
  end
;
iterate :: ((Num, Num) -> (Num, Num)) -> (Num, Num) -> [(Num, Num)]
iterate f x = x : iterate f (f x)
;
length :: [(Num, Num)] -> Num
length xxs = match xxs with [] -> 0 | x:xs -> 1 + length xs end
;
map :: (Num -> [(Num, Num)]) -> [Num] -> [[(Num, Num)]]
map f xxs =
  match xxs with
      []   -> []
    | x:xs -> f x : map f xs
  end
;
mapS :: ([(Num, Num)] -> [Char]) -> [[(Num, Num)]] -> [[Char]]
mapS f xxs =
  match xxs with
      []   -> []
    | x:xs -> f x : mapS f xs
  end
;
mapSI :: ((Num, Num) -> Char) -> [(Num, Num)] -> [Char]
mapSI f xxs =
  match xxs with
      []   -> []
    | x:xs -> f x : mapSI f xs
  end
;
take :: Num -> [(Num, Num)] -> [(Num, Num)]
take n xxs =
  if n <= 0
    then []
    else match xxs with
             []   -> []
           | x:xs -> x : take (n - 1) xs
         end
  end
;
takeWhile :: ((Num, Num) -> Bool) -> [(Num, Num)] -> [(Num, Num)]
takeWhile p xxs =
  match xxs with
      []   -> []
    | x:xs -> if p x then x : takeWhile p xs
                     else []
              end
  end
;
unlines :: [[Char]] -> [Char]
unlines lines =
  let app :: [Char] -> [Char] -> [Char]
      app xxs ys = match xxs with [] -> '\n':ys | x:xs -> x : app xs ys end ;
      loop :: [[Char]] -> [Char]
      loop lls = match lls with [] -> [] | l:ls -> app l (loop ls) end ;
  in loop lines
;

-- Fractal-specific stuff.

next :: (Num, Num) -> (Num, Num) -> (Num, Num)
next uv xy = match uv with (u, v) -> match xy with (x, y) -> (x*x-y*y+u, 2*x*y+v) end end
;
mandelbrot :: (Num, Num) -> [(Num, Num)]
mandelbrot p  = iterate (next p) (0, 0)
;
fairlyClose :: (Num, Num) -> Bool
fairlyClose uv = match uv with (u, v) -> (u*u + v*v) < 100 end
;
-- inMandelbrotSet :: (Num, Num) -> Bool
-- inMandelbrotSet p = all fairlyClose (mandelbrot p)
-- ;
-- approxTest    :: Num -> (Num, Num) -> Bool
-- approxTest n p = all fairlyClose (take n (mandelbrot p))
-- ;
charPalette :: Num -> Char
charPalette n =
  match n with
       0 -> ' '
    |  1 -> ' '
    |  2 -> ' '
    |  3 -> ' '
    |  4 -> ','
    |  5 -> '.'
    |  6 -> '`'
    |  7 -> '"'
    |  8 -> '~'
    |  9 -> ':'
    | 10 -> ';'
    | 11 -> 'o'
    | 12 -> '-'
    | 13 -> '!'
    | 14 -> '|'
    | 15 -> '?'
    | 16 -> '/'
    | 17 -> '<'
    | 18 -> '>'
    | 19 -> 'X'
    | 20 -> '+'
    | 21 -> '='
    | 22 -> '{'
    | 23 -> '^'
    | 24 -> 'O'
    | 25 -> '#'
    | 26 -> '%'
    | 27 -> '&'
    | 28 -> '@'
    | 29 -> '8'
    | 30 -> '*'
    | 31 -> '$'
  end
;
charPaletteLength :: Num
charPaletteLength = 32 - 1
;
chooseColor :: [(Num, Num)] -> Char
chooseColor ps = charPalette (length (take charPaletteLength (takeWhile fairlyClose ps)))
;
fracImage :: ((Num, Num) -> [(Num, Num)]) -> ((Num, Num) -> Char)
fracImage fractal point = chooseColor (fractal point)
;
for :: Num -> Num -> Num -> [Num]
for n min max =
  let delta_ :: Num
      delta_ = (max - min) / (n - 1) ;

      list :: Num -> Num -> [Num]
      list n x = if n > 0 then x : list (n - 1) (x + delta_) else [] end ;
  in list n min
;
grid :: Num -> Num -> (Num, Num) -> (Num, Num) -> [[(Num, Num)]]
grid cols rows min max =
  match min with (xmin, ymin) -> match max with (xmax, ymax) ->
    let row :: [Num]
        row = for cols xmin xmax ;
        col :: [Num]
        col = for rows ymin ymax ;
        mkGrid :: Num -> [(Num, Num)]
        mkGrid c =
          let f :: [Num] -> [(Num, Num)]
              f rrs = match rrs with [] -> [] | r:rs -> (r, c) : f rs end ;
           in f row ;
    in map mkGrid col
  end end
;
sample :: [[(Num, Num)]] -> ((Num, Num) -> Char) -> [[Char]]
sample points image = mapS (mapSI image) points
;
draw :: [[(Num, Num)]] -> ((Num, Num) -> [(Num, Num)]) -> [Char]
draw points fractal = unlines (sample points (fracImage fractal))
;
figure1 :: [Char]
figure1 =
  let points :: [[(Num, Num)]]
      points = grid 79 37 (0 - 2.25, 0 - 1.5) (0.75, 1.5) ;
   in draw points mandelbrot
;

main = figure1

-- Some other things from the paper:

-- mand p q = draw (grid 79 37 p q) mandelbrot charPalette charRender

-- demo6 = mand ((-1.15), 0.19) ((-0.75), 0.39)
-- map27 = mand ((-0.19920),1.01480) ((-0.12954),1.06707)
-- map29 = mand ((-0.95),0.23333) ((-0.88333),0.3)
-- map30 = mand ((-0.713),0.49216) ((-0.4082),0.71429)
