-- Generate a maze using DFS.
-- http://rosettacode.org/wiki/Maze_generation#Haskell

-- Boilerplate

min :: Num -> Num -> Num
min x y = if x < y then x else y end
;
append :: [(Num, Num)] -> [(Num, Num)] -> [(Num, Num)]
append xxs ys =
  match xxs with
      []   -> ys
    | x:xs -> x : (append xs ys)
  end
;
concat :: [[(Num, Num)]] -> [(Num, Num)]
concat xxs =
  match xxs with
      []   -> []
    | x:xs -> append x (concat xs)
  end
;
length :: [(Num, Num)] -> Num
length xxs =
  match xxs with
      []   -> 0
    | x:xs -> 1 + length xs
  end
;
elem :: (Num, Num) -> [(Num, Num)] -> Bool
elem x yys = match yys with
    [] -> False
  | y:ys -> x == y || elem x ys
  end
;
rotateN :: Num -> [(Num, Num)] -> [(Num, Num)]
rotateN n xxs = if n <= 0 then xxs else match xxs with [] -> [] | x:xs -> rotateN (n - 1) (append xs [x]) end end
;
foldr :: ((Num, Num) -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)])) -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)])))
      -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)]))
      -> [(Num, Num)]
      -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)]))
foldr f z xxs =
  match xxs with
      []   -> z
    | x:xs -> f x (foldr f z xs)
  end
;

randomSeed :: Num
randomSeed = 4242
;

-- Yield the /absent/ right and top walls for each cell.
maze :: Num -> Num -> ([(Num, Num)], [(Num, Num)])
maze width height =
  let neighbours :: (Num, Num) -> [(Num, Num)]
      neighbours xy = match xy with (x, y) -> concat
        [ if x > 0          then [(x - 1, y    )] else [] end,
          if x < width - 1  then [(x + 1, y    )] else [] end,
          if y > 0          then [(x,     y - 1)] else [] end,
          if y < height - 1 then [(x,     y + 1)] else [] end ] end
      ;
      removeWall :: (Num, Num) -> (Num, Num) -> ([(Num, Num)], [(Num, Num)])
                 -> ([(Num, Num)], [(Num, Num)])
      removeWall xy0 xy1 walls =
        match xy0 with (x0, y0) -> match xy1 with (x1, y1) -> match walls with (tWalls, rWalls) ->
          let xy :: (Num, Num)
              xy = (min x0 x1, min y0 y1) ;
          in if x0 == x1
            then (xy : tWalls, rWalls)
            else (tWalls, xy : rWalls)
          end end end end
      ;
      visit :: (Num, Num) -> Num -> [(Num, Num)] -> ([(Num, Num)], [(Num, Num)])
            -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)]))
      visit here0 rand0 visited0 walls0 =
        let visit1 :: (Num, Num) -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)]))
                                 -> (Num, [(Num, Num)], ([(Num, Num)], [(Num, Num)]))
            visit1 here1 s = match s with (rand, visited, walls) ->
              if elem here1 visited
                then s
                else visit here1 rand visited (removeWall here0 here1 walls)
              end end ;
            ns :: [(Num, Num)]
            ns = neighbours here0 ;
         in foldr visit1 (random rand0, here0 : visited0, walls0)
                         (rotateN (rand0 % length ns) ns)
      ;
      startX :: Num startX = random randomSeed ;
      startY :: Num startY = random startX ;
  in match visit (startX % (width - 1), startY % (height - 1)) (random startY) [] ([], []) with
       (rand, visited, walls) -> walls
     end
;

scaleFactor :: Num
scaleFactor = 10
;

scale :: (Num, Num) -> (Num, Num)
scale xy = match xy with (x, y) -> (scaleFactor * (x + 1), scaleFactor * (y + 1)) end
;

draw :: Num -> Num -> ([(Num, Num)], [(Num, Num)]) -> Picture
draw width height walls = match walls with (tWalls, rWalls) ->
  let lines :: Num -> Num -> [Shape] -> [Shape]
      lines x y ls =
        let ls1 :: [Shape]
            ls1 = if elem (x, y) tWalls
                    then ls
                    else Line (scale (x, y + 1)) (scale (x + 1, y + 1)) : ls
                  end ;
            ls2 :: [Shape]
            ls2 = if elem (x, y) rWalls
                    then ls1
                    else Line (scale (x + 1, y)) (scale (x + 1, y + 1)) : ls1
                  end ;
         in ls2
      ;
      cols :: Num -> [Shape] -> [Shape]
      cols x ls =
        if x < width
          then let rows :: Num -> [Shape] -> [Shape]
                   rows y ls =
                     if y < height
                       then rows (y + 1) (lines x y ls)
                       else ls
                     end ;
                in cols (x + 1) (rows 0 ls)
          else ls
        end
      ;
      bottom :: Num -> [Shape] -> [Shape]
      bottom x ls =
        if x < width
          then bottom (x + 1) (Line (scale (x, 0)) (scale (x + 1, 0)) : ls)
          else ls
        end
      ;
      left :: Num -> [Shape] -> [Shape]
      left y ls =
        if y < height
          then left (y + 1) (Line (scale (0, y)) (scale (0, y + 1)) : ls)
          else ls
        end
      ;
   in Canvas (scaleFactor * (width + 2)) (scaleFactor * (height + 2)) (cols 0 (left 0 (bottom 0 [])))
end
;

draw_maze :: Num -> Num -> Picture
draw_maze width height = draw width height (maze width height)
;

main = draw_maze 40 30
